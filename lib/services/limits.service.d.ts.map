{"version":3,"file":"limits.service.d.ts","sources":["limits.service.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import { BehaviorSubject } from 'rxjs';\r\nimport { ImageDimensions } from '../PublicModels';\r\nimport { LimitException, XYPosition } from '../PrivateModels';\r\nexport declare class LimitsService {\r\n    private limitDirections;\r\n    /**\r\n     * stores the crop limits limits\r\n     */\r\n    private _limits;\r\n    /**\r\n     * stores the array of the draggable points displayed on the crop area\r\n     */\r\n    private _points;\r\n    /**\r\n     * stores the pane dimensions\r\n     */\r\n    private _paneDimensions;\r\n    positions: BehaviorSubject<Array<PointPositionChange>>;\r\n    repositionEvent: BehaviorSubject<Array<PointPositionChange>>;\r\n    limits: BehaviorSubject<AreaLimits>;\r\n    paneDimensions: BehaviorSubject<ImageDimensions>;\r\n    constructor();\r\n    /**\r\n     * set privew pane dimensions\r\n     */\r\n    setPaneDimensions(dimensions: ImageDimensions): Promise<unknown>;\r\n    /**\r\n     * repositions points externally\r\n     */\r\n    repositionPoints(positions: any): void;\r\n    /**\r\n     * updates limits and point positions and calls next on the observables\r\n     * @param positionChangeData - position change event data\r\n     */\r\n    positionChange(positionChangeData: PointPositionChange): void;\r\n    /**\r\n     * updates the position of the point\r\n     * @param positionChange - position change event data\r\n     */\r\n    updatePosition(positionChange: PointPositionChange): void;\r\n    /**\r\n     * check if a position change event exceeds the limits\r\n     * @param positionChange - position change event data\r\n     * @returns LimitException0\r\n     */\r\n    exceedsLimit(positionChange: PointPositionChange): LimitException;\r\n    /**\r\n     * rotate crop tool points clockwise\r\n     * @param resizeRatios - ratio between the new dimensions and the previous\r\n     * @param initialPreviewDimensions - preview pane dimensions before rotation\r\n     * @param initialPositions - current positions before rotation\r\n     */\r\n    rotateClockwise(resizeRatios: any, initialPreviewDimensions: any, initialPositions: Array<PointPositionChange>): void;\r\n    /**\r\n     * returns the corner positions after a 90 degrees clockwise rotation\r\n     */\r\n    private rotateCornerClockwise;\r\n    /**\r\n     * checks if two array contain the same values\r\n     * @param array1 - array 1\r\n     * @param array2 - array 2\r\n     * @returns boolean\r\n     */\r\n    compareArray(array1: Array<string>, array2: Array<string>): boolean;\r\n    private getDirectionAxis;\r\n}\r\nexport interface PointPositionChange {\r\n    x: number;\r\n    y: number;\r\n    roles: RolesArray;\r\n}\r\nexport interface AreaLimits {\r\n    top: number;\r\n    bottom: number;\r\n    right: number;\r\n    left: number;\r\n}\r\nexport declare type RolesArray = Array<Direction>;\r\nexport declare class PositionChangeData implements PointPositionChange {\r\n    x: number;\r\n    y: number;\r\n    roles: RolesArray;\r\n    constructor(position: XYPosition, roles: RolesArray);\r\n}\r\nexport declare type Direction = 'left' | 'right' | 'top' | 'bottom';\r\n"]}