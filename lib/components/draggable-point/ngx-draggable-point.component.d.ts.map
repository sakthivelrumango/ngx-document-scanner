{"version":3,"file":"ngx-draggable-point.component.d.ts","sources":["ngx-draggable-point.component.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { AfterViewInit } from '@angular/core';\r\nimport { LimitsService } from '../../services/limits.service';\r\nimport { XYPosition } from '../../PrivateModels';\r\nexport declare class NgxDraggablePointComponent implements AfterViewInit {\r\n    private limitsService;\r\n    width: number;\r\n    height: number;\r\n    color: string;\r\n    shape: 'rect' | 'circle';\r\n    pointOptions: 'rect' | 'circle';\r\n    limitRoles: Array<'left' | 'right' | 'top' | 'bottom'>;\r\n    startPosition: XYPosition;\r\n    container: HTMLElement;\r\n    private _currentPosition;\r\n    position: XYPosition;\r\n    private _paneDimensions;\r\n    resetPosition: XYPosition;\r\n    constructor(limitsService: LimitsService);\r\n    ngAfterViewInit(): void;\r\n    /**\r\n     * returns a css style object for the point\r\n     */\r\n    pointStyle(): {\r\n        width: string;\r\n        height: string;\r\n        'background-color': string;\r\n        'border-radius': string | number;\r\n        position: string;\r\n    };\r\n    /**\r\n     * registers a position change on the limits service, and adjusts position if necessary\r\n     * @param position - the current position of the point\r\n     */\r\n    positionChange(position: XYPosition): void;\r\n    /**\r\n     * adjusts the position of the point after a limit exception\r\n     */\r\n    private adjustPosition;\r\n    /**\r\n     * called on movement end, checks if last position exceeded the limits ad adjusts\r\n     */\r\n    movementEnd(position: XYPosition): void;\r\n    /**\r\n     * calculates the initial positions of the point by it's roles\r\n     * @param dimensions - dimensions of the pane in which the point is located\r\n     */\r\n    private getInitialPosition;\r\n    /**\r\n     * repositions the point after an external reposition event\r\n     * @param positions - an array of all points on the pane\r\n     */\r\n    private externalReposition;\r\n    /**\r\n     * returns a new point position if the movement exceeded the pane limit\r\n     */\r\n    private enforcePaneLimits;\r\n}\r\n"]}