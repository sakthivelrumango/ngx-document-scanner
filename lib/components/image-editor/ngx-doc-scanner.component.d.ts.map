{"version":3,"file":"ngx-doc-scanner.component.d.ts","sources":["ngx-doc-scanner.component.d.ts"],"names":[],"mappingssourcesContent":["import { EventEmitter, OnInit } from '@angular/core';\r\nimport { LimitsService } from '../../services/limits.service';\r\nimport { MatBottomSheet } from '@angular/material/bottom-sheet';\r\nimport { PointShape } from '../../PrivateModels';\r\nimport { ImageDimensions, DocScannerConfig } from '../../PublicModels';\r\nimport { EditorActionButton, PointOptions } from '../../PrivateModels';\r\nimport { NgxOpenCVService } from 'ngx-opencv';\r\nexport declare class NgxDocScannerComponent implements OnInit {\r\n    private ngxOpenCv;\r\n    private limitsService;\r\n    private bottomSheet;\r\n    /**\r\n     * editor config object\r\n     */\r\n    options: ImageEditorConfig;\r\n    /**\r\n     * an array of action buttons displayed on the editor screen\r\n     */\r\n    private editorButtons;\r\n    /**\r\n     * returns an array of buttons according to the editor mode\r\n     */\r\n    get displayedButtons(): EditorActionButton[];\r\n    /**\r\n     * max width of the preview area\r\n     */\r\n    private maxPreviewWidth;\r\n    /**\r\n     * dimensions of the image container\r\n     */\r\n    imageDivStyle: {\r\n        [key: string]: string | number;\r\n    };\r\n    /**\r\n     * editor div style\r\n     */\r\n    editorStyle: {\r\n        [key: string]: string | number;\r\n    };\r\n    /**\r\n     * state of opencv loading\r\n     */\r\n    private cvState;\r\n    /**\r\n     * true after the image is loaded and preview is displayed\r\n     */\r\n    imageLoaded: boolean;\r\n    /**\r\n     * editor mode\r\n     */\r\n    mode: 'crop' | 'color';\r\n    /**\r\n     * filter selected by the user, returned by the filter selector bottom sheet\r\n     */\r\n    private selectedFilter;\r\n    /**\r\n     * viewport dimensions\r\n     */\r\n    private screenDimensions;\r\n    /**\r\n     * image dimensions\r\n     */\r\n    private imageDimensions;\r\n    /**\r\n     * dimensions of the preview pane\r\n     */\r\n    previewDimensions: ImageDimensions;\r\n    /**\r\n     * ration between preview image and original\r\n     */\r\n    private imageResizeRatio;\r\n    /**\r\n     * stores the original image for reset purposes\r\n     */\r\n    private originalImage;\r\n    /**\r\n     * stores the edited image\r\n     */\r\n    private editedImage;\r\n    /**\r\n     * stores the preview image as canvas\r\n     */\r\n    private previewCanvas;\r\n    /**\r\n     * an array of points used by the crop tool\r\n     */\r\n    private points;\r\n    /**\r\n     * optional binding to the exit button of the editor\r\n     */\r\n    exitEditor: EventEmitter<string>;\r\n    /**\r\n     * fires on edit completion\r\n     */\r\n    editResult: EventEmitter<Blob>;\r\n    /**\r\n     * emits errors, can be linked to an error handler of choice\r\n     */\r\n    error: EventEmitter<any>;\r\n    /**\r\n     * emits the loading status of the cv module.\r\n     */\r\n    ready: EventEmitter<boolean>;\r\n    /**\r\n     * emits true when processing is done, false when completed\r\n     */\r\n    processing: EventEmitter<boolean>;\r\n    /**\r\n     * set image for editing\r\n     * @param file - file from form input\r\n     */\r\n    set file(file: File);\r\n    /**\r\n     * editor configuration object\r\n     */\r\n    config: DocScannerConfig;\r\n    constructor(ngxOpenCv: NgxOpenCVService, limitsService: LimitsService, bottomSheet: MatBottomSheet);\r\n    ngOnInit(): void;\r\n    /**\r\n     * emits the exitEditor event\r\n     */\r\n    exit(): void;\r\n    /**\r\n     * applies the selected filter, and when done emits the resulted image\r\n     */\r\n    private exportImage;\r\n    /**\r\n     * open the bottom sheet for selecting filters, and applies the selected filter in preview mode\r\n     */\r\n    private chooseFilters;\r\n    /**\r\n     * load image from input field\r\n     */\r\n    private loadFile;\r\n    /**\r\n     * read image from File object\r\n     */\r\n    private readImage;\r\n    /**\r\n     * rotate image 90 degrees\r\n     */\r\n    private rotateImage;\r\n    /**\r\n     * detects the contours of the document and\r\n     **/\r\n    private detectContours;\r\n    /**\r\n     * apply perspective transform\r\n     */\r\n    private transform;\r\n    /**\r\n     * applies the selected filter to the image\r\n     * @param preview - when true, will not apply the filter to the edited image but only display a preview.\r\n     * when false, will apply to editedImage\r\n     */\r\n    private applyFilter;\r\n    /**\r\n     * resize an image to fit constraints set in options.maxImageDimensions\r\n     */\r\n    private resize;\r\n    /**\r\n     * display a preview of the image on the preview canvas\r\n     */\r\n    private showPreview;\r\n    /**\r\n     * set preview canvas dimensions according to the canvas element of the original image\r\n     */\r\n    private setPreviewPaneDimensions;\r\n    /**\r\n     * calculate dimensions of the preview canvas\r\n     */\r\n    private calculateDimensions;\r\n    /**\r\n     * returns a point by it's roles\r\n     * @param roles - an array of roles by which the point will be fetched\r\n     */\r\n    private getPoint;\r\n}\r\n/**\r\n * a class for generating configuration objects for the editor\r\n */\r\ndeclare class ImageEditorConfig implements DocScannerConfig {\r\n    /**\r\n     * max dimensions of oputput image. if set to zero\r\n     */\r\n    maxImageDimensions: ImageDimensions;\r\n    /**\r\n     * background color of the main editor div\r\n     */\r\n    editorBackgroundColor: string;\r\n    /**\r\n     * css properties for the main editor div\r\n     */\r\n    editorDimensions: {\r\n        width: string;\r\n        height: string;\r\n    };\r\n    /**\r\n     * css that will be added to the main div of the editor component\r\n     */\r\n    extraCss: {\r\n        [key: string]: string | number;\r\n    };\r\n    /**\r\n     * material design theme color name\r\n     */\r\n    buttonThemeColor: 'primary' | 'warn' | 'accent';\r\n    /**\r\n     * icon for the button that completes the editing and emits the edited image\r\n     */\r\n    exportImageIcon: string;\r\n    /**\r\n     * color of the crop tool\r\n     */\r\n    cropToolColor: string;\r\n    /**\r\n     * shape of the crop tool, can be either a rectangle or a circle\r\n     */\r\n    cropToolShape: PointShape;\r\n    /**\r\n     * dimensions of the crop tool\r\n     */\r\n    cropToolDimensions: ImageDimensions;\r\n    /**\r\n     * aggregation of the properties regarding point attributes generated by the class constructor\r\n     */\r\n    pointOptions: PointOptions;\r\n    /**\r\n     * aggregation of the properties regarding the editor style generated by the class constructor\r\n     */\r\n    editorStyle?: {\r\n        [key: string]: string | number;\r\n    };\r\n    /**\r\n     * crop tool outline width\r\n     */\r\n    cropToolLineWeight: number;\r\n    /**\r\n     * maximum size of the preview pane\r\n     */\r\n    maxPreviewWidth: number;\r\n    constructor(options: DocScannerConfig);\r\n}\r\nexport {};\r\n"]}